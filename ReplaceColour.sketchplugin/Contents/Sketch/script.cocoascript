var onRun = function(context) {
	var doc            = context.document;
	var selectedLayers = context.selection;
	var selectedCount  = selectedLayers.count();

	// Plugin requires a selection to determine the starting colour
	if (selectedCount == 0) {
		doc.displayMessage('No layer selected');
	} else {
		// Settings
		var selectedLayer     = getSelectedLayer(selectedLayers.firstObject());
		var originalFill      = selectedLayer.style().fills().firstObject();
		var originalBorder    = selectedLayer.style().borders().firstObject();
		var selectedLayerType = getLayerType(selectedLayer);

		// Options window
		var alert             = buildDialog(selectedLayer, selectedLayerType);
    	var options           = handleAlertResponse(alert, alert.runModal(), selectedLayerType, originalFill, originalBorder);

		// Colours
		var colour            = getColour(selectedLayer, options.layerProperty);
		var originalColour    = "#" + colour.hexValue();
		var replacementColour = options.colour;

		if (replacementColour != undefined) {
			// All pages
			for (var i = 0; i < doc.pages().count(); i++) {
				var page = doc.pages().objectAtIndex(i);

				// All artboards
				for (var j = 0; j < page.artboards().count(); j++) {
					var artboard = page.artboards().objectAtIndex(j);

					// All layers inside artboard
					for (var k = 0; k < artboard.layers().count(); k++) {
						var layer = artboard.layers().objectAtIndex(k);

						checkLayer(layer, options, originalColour);
					}
				}

				// All layers inside page
				for (var j = 0; j < page.layers().count(); j++) {
					var layer = page.layers().objectAtIndex(j);

					checkLayer(layer, options, originalColour);
				}
			}
		}
	}

	/**
	 * Build dialog window with appropriate options
	 * @param  {NSLayer}        selectedLayer     The layer selected at run time
	 * @param  {NSLayer}        selectedLayerType The layer type of the layer selected at run time
	 * @return {COSAlertWindow}                   The alert window requesting input
	 */
    function buildDialog(selectedLayer, selectedLayerType) {
    	var alert = COSAlertWindow.new();

		alert.setMessageText('Find & Replace Colour');

		if (selectedLayerType == MSShapeGroup) {
			// Shape layer
			if (originalFill != undefined && originalBorder != undefined) {
				// Only provide the property option if this is a shape and it has both a fill and a border
				alert.setInformativeText('Select the property containing the colour to replace, enter a replacement colour, and choose which properties to update.');

				var choosePropertyOptions = ['Fill', 'Border'];
				var choosePropertySelect  = createSelect(choosePropertyOptions, 0);

				alert.addAccessoryView(choosePropertySelect);
			} else if (originalFill != undefined && originalBorder == undefined) {
				// Replacing fill
				colour = getColour(selectedLayer, 'Fill');
				alert.setInformativeText('You will be replacing the Fill colour (#' + colour.hexValue() + ') of this layer.');
			} else if (originalFill == undefined && originalBorder != undefined) {
				// Replacing border
				colour = getColour(selectedLayer, 'Border');
				alert.setInformativeText('You will be replacing the Border colour (#' + colour.hexValue() + ') of this layer.');
			}
		} else {
			// Text layer
			colour = getColour(selectedLayer, 'Text');
			alert.setInformativeText('You will be replacing the Text colour (#' + colour.hexValue() + ') of this layer.');
		}

		alert.addTextLabelWithValue('What is your new colour?');
		alert.addTextFieldWithValue('#');

		alert.addTextLabelWithValue('What should we update on other layers?');

		var propertyOptions = ['All', 'Fill', 'Border', 'Text'];
		var propertySelect  = createSelect(propertyOptions, 0);
		alert.addAccessoryView(propertySelect);

		alert.addButtonWithTitle('OK');
		alert.addButtonWithTitle('Cancel');

		return alert;
    }

	/**
	 * Create Select Box for dialog windows
	 * @param  {Array}      options           Options for the select
	 * @param  {Int}        selectedItemIndex Default selected item
	 * @return {NSComboBox}                   Complete select box
	 */
	function createSelect(options, selectedItemIndex) {
		selectedItemIndex = selectedItemIndex || 0;

		var select = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,25));
		select.i18nObjectValues = options;
		select.setEditable(false);
		select.addItemsWithObjectValues(options);
		select.selectItemAtIndex(selectedItemIndex);

		return select;
	}

	/**
	 * Get the requested style (fill, border, text) colour of the given layer
	 * @param  {MSLayer} layer         The layer whose colour to get
	 * @param  {Object}  layerProperty The style colour to fetch
	 * @return {MSColor}               The selected layer colour
	 */
	function getColour(layer, layerProperty) {
		var colour = null;

		if (layerProperty == 'Text') {
			colour = layer.textColor();

			// If the text layer also has a fill, use this as the primary colour
			var fill = layer.style().fills().firstObject();

			if (fill != undefined && fill.isEnabled()) {
				colour = fill.color();
			}
		} else if (layerProperty == 'Fill') {
			var fill = layer.style().fills().firstObject();

			if (fill != undefined && fill.isEnabled()) {
				colour = fill.color();
			}
		} else if (layerProperty == 'Border') {
			var border = layer.style().borders().firstObject();

			if (border != undefined && border.isEnabled()) {
				colour = border.color();
			}
		}

		if (colour != null) {
			colour = colour.immutableModelObject();
		}

		return colour;
	}

	/**
	 * Retrieve the layer class of the chosen layer
	 * @param  {NSLayer} selectedLayer The layer to query
	 * @return {String}                The type of layer
	 */
	function getLayerType(selectedLayer) {
    	return selectedLayer.class();
	}

	/**
	 * If the selected layer is a group, get its first child, and return a single layer
	 * @param  {NSLayer} selectedLayer The layer selected at run time
	 * @return {NSLayer}               The layer selected, or the first child if a group
	 */
	function getSelectedLayer(selectedLayer) {
		var selectedLayerType = getLayerType(selectedLayer);

		if (selectedLayerType == MSLayerGroup) {
			return getSelectedLayer(selectedLayer.layers().firstObject());
		} else {
			return selectedLayer;
		}
	}

	/**
	 * Collect user input from alert window
	 * @param  {COSAlertWindow} alert             The alert window
	 * @param  {Int}            responseCode      Alert window response code
	 * @param  {String}         selectedLayerType Class of the originally selected layer
	 * @return {Object}                           Alert window results
	 */
	function handleAlertResponse(alert, responseCode, selectedLayerType, originalFill, originalBorder) {
	    if (responseCode == "1000") {
			if (selectedLayerType == MSShapeGroup) {
				// Shape layer
				if (originalFill != undefined && originalBorder != undefined) {
					// 0 = Property Select
					// 1 = Label
					// 2 = Text Input
					// 3 = Label
					// 4 = Property Select
			        return {
			        	layerProperty       : alert.viewAtIndex(0).i18nObjectValues[alert.viewAtIndex(0).indexOfSelectedItem()],
			        	colour              : alert.viewAtIndex(2).stringValue(),
			        	replacementProperty : alert.viewAtIndex(4).i18nObjectValues[alert.viewAtIndex(4).indexOfSelectedItem()]
			        };
				} else if (originalFill != undefined && originalBorder == undefined) {
					// 0 = Label
					// 1 = Text Input
					// 2 = Label
					// 3 = Property Select
			        return {
			        	layerProperty       : 'Fill',
			        	colour              : alert.viewAtIndex(1).stringValue(),
						replacementProperty : alert.viewAtIndex(3).i18nObjectValues[alert.viewAtIndex(3).indexOfSelectedItem()]
			        };
				} else if (originalFill == undefined && originalBorder != undefined) {
					// 0 = Label
					// 1 = Text Input
					// 2 = Label
					// 3 = Property Select
			        return {
			        	layerProperty       : 'Border',
			        	colour              : alert.viewAtIndex(1).stringValue(),
			        	replacementProperty : alert.viewAtIndex(3).i18nObjectValues[alert.viewAtIndex(3).indexOfSelectedItem()]
			        };
				}
			} else {
				// Text layer
				// 0 = Label
				// 1 = Text Input
				// 2 = Label
				// 3 = Property Select
				return {
					layerProperty       : 'Text',
		        	colour              : alert.viewAtIndex(1).stringValue(),
		        	replacementProperty : alert.viewAtIndex(3).i18nObjectValues[alert.viewAtIndex(3).indexOfSelectedItem()]
		        };
			}
	    }

    	return null;
    }

	/**
	 * Check if a layer's colour matches the colour of the originally selected layer
	 * @param  {MSLayer} layer The layer whose colour we are comparing
	 * @return null
	 */
	function checkLayer(layer, options, originalColour) {
		var layerType           = layer.class();
		var replacementProperty = options.replacementProperty;

		if (layerType == MSLayerGroup) {
			// Apply to all layers in a group
			for (var i = 0; i < layer.layers().count(); i++) {
				checkLayer(layer.layers().objectAtIndex(i), options, originalColour);
			}
		} else {
			if (layerType == MSShapeGroup) {
				// Set fill
				if (replacementProperty == 'Fill' || replacementProperty == 'All') {
					setColour(layer, layerType, 'Fill', replacementColour, originalColour);
				}

				// Set border
				if (replacementProperty == 'Border' || replacementProperty == 'All') {
					setColour(layer, layerType, 'Border', replacementColour, originalColour);
				}
			} else if (layerType == MSTextLayer && (replacementProperty == 'Text' || replacementProperty == 'All')) {
				// Set text colour
				setColour(layer, layerType, 'Text', replacementColour, originalColour);
			}
		}
	}

	/**
     * Convert hex string into RGBA
     * @param  {string} hexColor Hex Colour (with or without #)
     * @return {object}          Converted RGB values.
     */
    function hexToRgba(hex) {
    	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

		if (result) {
			result = {
	        	r : parseInt(result[1], 16),
	        	g : parseInt(result[2], 16),
	        	b : parseInt(result[3], 16),
				a : 1
	        };
		} else {
			result = null;
		}

		return result;
    }

	/**
	 * Set the fill or text colour of a layer to the newly specified colour
	 * @param {MSLayer}     layer               The layer whose colour to set
	 * @param {MSLayerType} layerType           The type of layer
	 * @param {string}      replacementProperty The property to replace
	 * @param {string}      replacementColour   The new colour to use
	 * @param {string}      originalColour      The original colour to replace
	 */
	function setColour(layer, layerType, replacementProperty, replacementColour, originalColour) {
		var layerColour = getColour(layer, replacementProperty);

		replacementColour = hexToRgba(replacementColour);

		if (layerColour != undefined && replacementColour != null) {
			var hexColour = '#' + layerColour.hexValue();

			if (hexColour == originalColour) {
				// Matching item to update
				if (layerType == MSShapeGroup) {
					// Shape
					if (replacementProperty == 'Fill') {
						var fill = layer.style().fills().firstObject();

						if (fill != undefined) {
							fill.color = MSColor.colorWithRed_green_blue_alpha(replacementColour.r, replacementColour.g, replacementColour.b, replacementColour.a);
						}
					}

					if (replacementProperty == 'Border') {
						var border = layer.style().borders().firstObject();

						if (border != undefined) {
							border.color = MSColor.colorWithRed_green_blue_alpha(replacementColour.r, replacementColour.g, replacementColour.b, replacementColour.a);
						}
					}
				} else {
					layer.textColor = MSColor.colorWithRed_green_blue_alpha(replacementColour.r, replacementColour.g, replacementColour.b, replacementColour.a);
				}
			}
		}
	}
};
